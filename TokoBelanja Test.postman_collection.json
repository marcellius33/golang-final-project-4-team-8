{
	"info": {
		"_postman_id": "7c34a6f7-aaac-4e59-93fd-25968e1fe109",
		"name": "TokoBelanja Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21171989"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Register User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Register Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body data should have id property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals('');\r",
									" \r",
									"    pm.environment.set('currentUserId', payload.id);\r",
									"    pm.environment.set('currentEmail', payload.email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"full_name\" : \"Username Test1122\",\r\n    \"email\" : \"usernametest22@gmail.com\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "Register User with Valid Payload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"full_name\" : \"Username Test1122\",\r\n    \"email\" : \"usernametest2@gmail.com\",\r\n    \"password\": \"testt123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/users/register",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:15:58 GMT"
								},
								{
									"key": "content-length",
									"value": "260"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "89"
								},
								{
									"key": "server",
									"value": "railway"
								},
								{
									"key": "connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 201,\n    \"message\": \"Register Success\",\n    \"payload\": {\n        \"id\": 4,\n        \"full_name\": \"Username Test1122\",\n        \"email\": \"usernametest2@gmail.com\",\n        \"password\": \"$2a$10$F4WitPsTcRXrrNXAPs6zi.QXa40vHzSgaG.xtCmxXnKfjXZy8myGO\",\n        \"balance\": 0,\n        \"created_at\": \"2022-12-15T16:15:58.130030854Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Login with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Login Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body data should have property accessToken and refreshToken with correct value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.have.ownProperty('token');\r",
									"    pm.expect(payload.token).to.not.equals('');\r",
									"    pm.expect(payload.token).to.not.equals(null);\r",
									" \r",
									"    // menyimpan accessToken dan refreshToken di environment variable\r",
									"    pm.environment.set('accessToken', payload.token);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"{{currentEmail}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login with Valid Payload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"{{currentEmail}}\",\r\n    \"password\": \"{{passwordUser}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/users/login",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:16:23 GMT"
								},
								{
									"key": "content-length",
									"value": "224"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "87"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Login Success\",\n    \"payload\": {\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJuYW1ldGVzdDJAZ21haWwuY29tIiwiaWQiOjQsInJvbGUiOiJjdXN0b21lciJ9.ow27NwwVHYA0-TKuHXod157TXrDIucFhhSacEfdGz1A\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update Balance User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).not.equals(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"balance\" : 50000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/users/topup",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"users",
								"topup"
							]
						}
					},
					"response": [
						{
							"name": "Update Balance User with Valid Payload",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"balance\" : 50000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/users/topup",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"users",
										"topup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:16:34 GMT"
								},
								{
									"key": "content-length",
									"value": "81"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "8"
								},
								{
									"key": "server",
									"value": "railway"
								},
								{
									"key": "connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Your balance has been successfully updated to Rp 50000\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Prerequisite",
			"item": [
				{
					"name": "[Prerequisite] Login Admin with Valid Payload Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { payload } = pm.response.json();\r",
									"pm.environment.set('accessTokenAdmin', payload.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"{{emailAdmin}}\",\r\n    \"password\": \"{{passwordAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "[Prerequisite] Login Admin with Valid Payload Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"{{emailAdmin}}\",\r\n    \"password\": \"{{passwordAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/users/login",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:17:00 GMT"
								},
								{
									"key": "content-length",
									"value": "210"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "87"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Login Success\",\n    \"payload\": {\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGdtYWlsLmNvbSIsImlkIjoxLCJyb2xlIjoiYWRtaW4ifQ.Xhtn8aaenm2myAXyITNxM4jvSUwAwN4BnCIuy1YBtBg\"\n    }\n}"
						}
					]
				},
				{
					"name": "[Prerequisite] Add Category with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { payload } = pm.response.json();\r",
									"pm.environment.set('categoryProductId', payload.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\" : \"prerequisite\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Prerequisite] Add Product with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const { payload } = pm.response.json();\r",
									"pm.environment.set('transProductId', payload.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Prerequisite\",\r\n    \"price\" : 1000,\r\n    \"stock\": 35,\r\n    \"category_id\":{{categoryProductId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Add Category with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Create Category Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals(null);\r",
									" \r",
									"    pm.environment.set('categoryId', payload.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\" : \"categori tessst\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": [
						{
							"name": "Add Category with Valid Payload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\" : \"categori tessst\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories/",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"categories",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:17:28 GMT"
								},
								{
									"key": "content-length",
									"value": "163"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "9"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 201,\n    \"message\": \"Create Category Success\",\n    \"payload\": {\n        \"id\": 2,\n        \"type\": \"categori tessst\",\n        \"sold_product_amount\": 0,\n        \"created_at\": \"2022-12-15T16:17:28.00354961Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Category with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals(200);\r",
									"   pm.expect(responseJson).to.have.ownProperty('payload');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { payload } = responseJson;\r",
									"\r",
									"   pm.expect(payload).to.be.an('array');\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": [
						{
							"name": "Get Category with Valid Authorization",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories/",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"categories",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:18:35 GMT"
								},
								{
									"key": "content-length",
									"value": "221"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "10"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Get Categories Success\",\n    \"payload\": [\n        {\n            \"id\": 2,\n            \"type\": \"categori tessst\",\n            \"sold_product_amount\": 0,\n            \"created_at\": \"2022-12-15T16:17:28.003549Z\",\n            \"updated_at\": \"2022-12-15T16:17:28.003549Z\",\n            \"Products\": null\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Edit Category  with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Update Category Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\" : \"tessst edit\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories/{{categoryId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": [
						{
							"name": "Edit Category  with Valid Auth and Payload",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"type\" : \"tessst edit\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories/{{categoryId}}",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:21:40 GMT"
								},
								{
									"key": "content-length",
									"value": "160"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "11"
								},
								{
									"key": "server",
									"value": "railway"
								},
								{
									"key": "connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Update Category Success\",\n    \"payload\": {\n        \"id\": 2,\n        \"type\": \"tessst edit\",\n        \"sold_product_amount\": 0,\n        \"updated_at\": \"2022-12-15T16:21:40.088151983Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete Category with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Category has been successfully deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories/{{categoryId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"categories",
								"{{categoryId}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Category with Valid Auth and Payload",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/categories/{{categoryId}}",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"categories",
										"{{categoryId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:21:59 GMT"
								},
								{
									"key": "content-length",
									"value": "65"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "10"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Category has been successfully deleted\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Add Product with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Create Product Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals(null);\r",
									" \r",
									"    pm.environment.set('productId', payload.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Mikrotik\",\r\n    \"price\" : 15000,\r\n    \"stock\": 10,\r\n    \"category_id\":{{categoryProductId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Add Product with Valid Payload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\" : \"Mikrotik\",\r\n    \"price\" : 15000,\r\n    \"stock\": 10,\r\n    \"category_id\":{{categoryProductId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:24:57 GMT"
								},
								{
									"key": "content-length",
									"value": "174"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "8"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 201,\n    \"message\": \"Create Product Success\",\n    \"payload\": {\n        \"id\": 1,\n        \"title\": \"Mikrotik\",\n        \"price\": 15000,\n        \"stock\": 10,\n        \"category_id\": 3,\n        \"created_at\": \"2022-12-15T16:24:57.796399922Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Product with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals(200);\r",
									"   pm.expect(responseJson).to.have.ownProperty('payload');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { payload } = responseJson;\r",
									"\r",
									"   pm.expect(payload).to.be.an('array');\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Get Product with Valid Authorization",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:25:43 GMT"
								},
								{
									"key": "content-length",
									"value": "286"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "2"
								},
								{
									"key": "server",
									"value": "railway"
								},
								{
									"key": "connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Get Products Success\",\n    \"payload\": [\n        {\n            \"id\": 1,\n            \"title\": \"Mikrotik\",\n            \"price\": 15000,\n            \"stock\": 10,\n            \"category_id\": 3,\n            \"created_at\": \"2022-12-15T16:24:57.796399Z\"\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Prerequisite\",\n            \"price\": 1000,\n            \"stock\": 35,\n            \"category_id\": 3,\n            \"created_at\": \"2022-12-15T16:25:31.207673Z\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Edit Product  with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Update Product Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Mikrotik Edit\",\r\n    \"price\" : 15500,\r\n    \"stock\": 12,\r\n    \"category_id\":{{categoryProductId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products/{{productId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": [
						{
							"name": "Edit Product  with Valid Auth and Payload",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\" : \"Mikrotik Edit\",\r\n    \"price\" : 15500,\r\n    \"stock\": 12,\r\n    \"category_id\":{{categoryProductId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products/{{productId}}",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"products",
										"{{productId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:26:01 GMT"
								},
								{
									"key": "content-length",
									"value": "222"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "9"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Update Product Success\",\n    \"payload\": {\n        \"id\": 1,\n        \"title\": \"Mikrotik Edit\",\n        \"price\": 15500,\n        \"stock\": 12,\n        \"category_id\": 3,\n        \"created_at\": \"2022-12-15T16:24:57.796399Z\",\n        \"updated_at\": \"2022-12-15T16:26:01.974101391Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete Product with Valid Auth and Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									" \r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									" \r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									" \r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(200);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Product has been successfully deleted');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products/{{productId}}",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": [
						{
							"name": "Delete Product with Valid Auth and Payload",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/products/{{productId}}",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"products",
										"{{productId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:26:17 GMT"
								},
								{
									"key": "content-length",
									"value": "64"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "5"
								},
								{
									"key": "server",
									"value": "railway"
								},
								{
									"key": "connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Product has been successfully deleted\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "TransactionHistories",
			"item": [
				{
					"name": "Add Transaction with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(201);\r",
									"}); \r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.ownProperty('status');\r",
									"    pm.expect(responseJson.status).to.equals(201);\r",
									"    pm.expect(responseJson).to.ownProperty('message');\r",
									"    pm.expect(responseJson.message).to.equals('Create Comment Success');\r",
									"    pm.expect(responseJson).to.ownProperty('payload');\r",
									"    pm.expect(responseJson.payload).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { payload } = responseJson;\r",
									" \r",
									"    pm.expect(payload).to.ownProperty('id');\r",
									"    pm.expect(payload.id).to.not.equals(null);\r",
									" \r",
									"    pm.environment.set('commentId', payload.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\" : {{transProductId}},\r\n    \"quantity\" : 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/transactions",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"transactions"
							]
						}
					},
					"response": [
						{
							"name": "Add Transaction with Valid Payload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"product_id\" : {{transProductId}},\r\n    \"quantity\" : 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/transactions",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"transactions"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:41:41 GMT"
								},
								{
									"key": "content-length",
									"value": "144"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "27"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 201,\n    \"message\": \"Create TransactionHistory Success\",\n    \"transaction_bill\": {\n        \"total_price\": 3000,\n        \"quantity\": 3,\n        \"product_title\": \"Prerequisite\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get My Transactions with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals(200);\r",
									"   pm.expect(responseJson).to.have.ownProperty('payload');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { payload } = responseJson;\r",
									"\r",
									"   pm.expect(payload).to.be.an('array');\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/transactions/my-transactions",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"transactions",
								"my-transactions"
							]
						}
					},
					"response": [
						{
							"name": "Get My Transactions with Valid Authorization",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/transactions/my-transactions",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"transactions",
										"my-transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:42:05 GMT"
								},
								{
									"key": "content-length",
									"value": "311"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "5"
								},
								{
									"key": "server",
									"value": "railway"
								},
								{
									"key": "connection",
									"value": "close"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Get My Transaction Histories Success\",\n    \"payload\": [\n        {\n            \"id\": 1,\n            \"product_id\": 2,\n            \"user_id\": 4,\n            \"quantity\": 3,\n            \"total_price\": 3000,\n            \"Product\": {\n                \"id\": 2,\n                \"title\": \"Prerequisite\",\n                \"price\": 1000,\n                \"stock\": 32,\n                \"category_id\": 3,\n                \"created_at\": \"2022-12-15T16:25:31.207673Z\",\n                \"updated_at\": \"2022-12-15T16:41:41.118694Z\"\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get User Transactions with Valid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"   pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.be.an('object');\r",
									"}); \r",
									"\r",
									"pm.test('response body should have the correct property and value', () => {\r",
									"  const responseJson = pm.response.json();\r",
									"   pm.expect(responseJson).to.have.ownProperty('status');\r",
									"   pm.expect(responseJson.status).to.equals(200);\r",
									"   pm.expect(responseJson).to.have.ownProperty('payload');\r",
									"});\r",
									"\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"   const responseJson = pm.response.json();\r",
									"   const { payload } = responseJson;\r",
									"\r",
									"   pm.expect(payload).to.be.an('array');\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://golang-final-project-4-team-8-production.up.railway.app/transactions/user-transactions",
							"protocol": "https",
							"host": [
								"golang-final-project-4-team-8-production",
								"up",
								"railway",
								"app"
							],
							"path": [
								"transactions",
								"user-transactions"
							]
						}
					},
					"response": [
						{
							"name": "Get User Transactions with Valid Authorization",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://golang-final-project-4-team-8-production.up.railway.app/transactions/user-transactions",
									"protocol": "https",
									"host": [
										"golang-final-project-4-team-8-production",
										"up",
										"railway",
										"app"
									],
									"path": [
										"transactions",
										"user-transactions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "date",
									"value": "Thu, 15 Dec 2022 16:42:28 GMT"
								},
								{
									"key": "content-length",
									"value": "453"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "9"
								},
								{
									"key": "server",
									"value": "railway"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": 200,\n    \"message\": \"Get User Transaction Histories Success\",\n    \"payload\": [\n        {\n            \"id\": 1,\n            \"product_id\": 2,\n            \"user_id\": 4,\n            \"quantity\": 3,\n            \"total_price\": 3000,\n            \"Product\": {\n                \"id\": 2,\n                \"title\": \"Prerequisite\",\n                \"price\": 1000,\n                \"stock\": 32,\n                \"category_id\": 3,\n                \"created_at\": \"2022-12-15T16:25:31.207673Z\",\n                \"updated_at\": \"2022-12-15T16:41:41.118694Z\"\n            },\n            \"User\": {\n                \"id\": 4,\n                \"email\": \"usernametest2@gmail.com\",\n                \"full_name\": \"Username Test1122\",\n                \"balance\": 47000,\n                \"created_at\": \"2022-12-15T16:15:58.13003Z\"\n            }\n        }\n    ]\n}"
						}
					]
				}
			]
		}
	]
}